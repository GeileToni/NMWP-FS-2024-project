% author: Mauro Morini  
% last modified: 30.04.24
clc;clear;close all;

% Initialization 
H = 0.5;
h = 0.03;
r = 0.95;
dt = h^2*r;
omega = 2*pi;
T = [0.4, 1, 2, 5, 7, 8, 9, 10, 10.5, 11, 11.5, 12, 12.2, 12.5, 12.7, 13, 14, 14.5:0.5:18];
T = 0.5:0.5:30;

% create mesh
R1coord = [12, 0; 12.25, 0; 12.25, 5.5; 12, 5.5];
R2coord = [12, 6; 12.25, 6; 12.25, 10; 12, 10];
RTotCoord = [R1coord; NaN, NaN; R2coord];
dl = gen_mesh(0);
model = createpde;
geometryFromEdges(model, dl);
generateMesh(model, GeometricOrder='linear', Hface={1,H,[2,3],h});
[p,e,t] = meshToPet(model.Mesh);
p = p';
t = t';
t = t(:, 1:3);
e = e';
e = e(:, 1:2);

% functions
kappa = @(x,y) 1*~inpolygon(x,y,RTotCoord(:, 1), RTotCoord(:, 2)) + ...
        0.2*inpolygon(x,y,RTotCoord(:, 1), RTotCoord(:, 2));
roh_r = @(t) 0.1/(1+0.2*cos(pi/2*t));
roh = @(x,y,t) 1*~inpolygon(x,y,RTotCoord(:, 1), RTotCoord(:, 2)) + ...
        roh_r(t)*inpolygon(x,y,RTotCoord(:, 1), RTotCoord(:, 2));
g = @(x,y,t) sin(omega*(x - t));
u0 = @(x,y) x*0;
u1 = u0;

%%
% uh_T = zeros(size(p, 1), length(T));
% for i = 1:length(T)
%     uh_T(:, i) = waveEqLF2D(u0, u1, g, T(i), dt, p, e, t, kappa, roh);
%     disp("Computation for t = " + T(i) + " completed")
% end
uh_T = waveEqLF2D(u0, u1, g, T, dt, p, e, t, kappa, roh);
%%

% plot
for i = 1:31
    figure;
    % tld = tiledlayout('flow');
    % nexttile
    trisurf(t,p(:,1),p(:,2),uh_T(:,i), 'EdgeColor', 'none')
    %title("uh_T, t = " + T(i))
    % view(2)
end

save("NMWP_Project_E4_workspace_backup_v1.02.mat")

save("uh_T_E4_v1.02.mat","uh_T")
% save("NMWP_Project_resonator_mesh_data_v1.02.mat")
